var fs = require('fs');
const _ = require('underscore');
// classes 
// var Order = require('../models/order.js');
// data
const ordersData = require("../data/orders.json");
const users = require("../data/users.json");

// run with `node Generators/productRestrictionGen.js`;

// combine order, product, user, and company data into one flat object and store in flatProducts array.
var flatProducts = [];

fText = "# This file was generated by a function in Generators/productRestrictionGen.js\n\n";

// add to fText to handle version 1

// Scenario: If either company or order have codebase version 1 allow users to order products that belong to any company.
//     Given an order is placed on codebase version 1 or a company is on version 1
//     When a user puts a product in their cart that is from another company
//     Then the item is allowed and they should see the "item successfully added" message.

fText += "\tScenario: If either company or order have codebase version 1 allow users to order products that belong to any company.\n";
fText += "\t\tGiven an order is placed on codebase version 1 or a company is on version 1\n";
fText += "\t\tWhen a user puts a product in their cart that is from another company\n";
fText += "\t\tThen the item is allowed and they should see the 'item successfully added' message.\n";

/* 
Questions
Q: should we include cases for version 1 where we just allow adding any product to cart?
A: 


*/

class Order {
    constructor(id, userId, codebaseVersion) {
        this.id = id;
        this.userId = userId;
        this.codebaseVersion = codebaseVersion;
    }
}

class Company {
    constructor(id, codebaseVersion) {
        this.codebaseVersion = codebaseVersion;
        this.id = id;
    }
}

ordersData.forEach(function(order) {
    if (order.codebaseVersion == 1) {
        var flatOrder = joinUserToOrder(order);
        console.log('flatOrder', flatOrder);
        // query company object to get it's codebase version
        // if v1 return
        if (flatOrder.userCompanyCodebaseVersion == 1) {
            console.log('company is v1', flatOrder.userCompanyCodebaseVersion);
            return;
        }
        else {
            createExampleRow(order);
        } 
    }
});

function createExampleRow() {
    // to find product company id..
    // query users.json to get user's companyId
    // iterate through products to query product
}

fs.writeFile(
    "features/productRestrictionGen.feature", 
    fText, 
    (err) => {
        if (err) throw err;
        console.log('The productRestrictionGen.feature file has been saved!');
    }
);

function createExampleRow(order) {

    

    fText += 'Feature: \n';
    fText += "\tScenario: " + order.name + "\n";

    order.products.forEach(function(product) {
        
        
        // exec("node cucumber /features -r /steps");
        // if you want to use exec() see link: https://stackabuse.com/executing-shell-commands-with-node-js/

        fText += "\t\tGiven codebase is version 1\n";
        fText += "\t\tAnd user is type basic\n";
        fText += "\t\tWhen user adds product to cart\n"
        fText += "\t\tThen cart should have at least 1 products" + "\n"
        fText += "\t\tAnd cart should have no more than 5 products" + "\n\n"
    })
}

function joinUserToOrder(order) {
    var orderUser = _.findWhere(users, function(user) {
        return user.id == order.userId
    });
    order.userType = orderUser.type;
    order.userCompanyId = orderUser.company.id;
    order.userCompanyCodebaseVersion = orderUser.company.codebaseVersion;
    return order;
}
